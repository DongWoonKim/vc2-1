name: PR 자동 할당

on:
  pull_request:
    types: [opened, reopened]

jobs:
  assign:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      contents: read
      
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: 변경된 파일 분석
      id: analyze
      run: |
        echo "Changed files:"
        git fetch origin ${{ github.base_ref }}
        git diff --name-only origin/${{ github.base_ref }}...HEAD
        
        # 컴포넌트별 담당자 결정
        if git diff --name-only origin/${{ github.base_ref }}...HEAD | grep -q "^backend/"; then
          echo "assignee=backend-team" >> $GITHUB_OUTPUT
          echo "component=backend" >> $GITHUB_OUTPUT
        elif git diff --name-only origin/${{ github.base_ref }}...HEAD | grep -q "^frontend/"; then
          echo "assignee=frontend-team" >> $GITHUB_OUTPUT
          echo "component=frontend" >> $GITHUB_OUTPUT
        elif git diff --name-only origin/${{ github.base_ref }}...HEAD | grep -q "\.md$\|^docs/"; then
          echo "assignee=docs-team" >> $GITHUB_OUTPUT
          echo "component=docs" >> $GITHUB_OUTPUT
        else
          echo "assignee=maintainer" >> $GITHUB_OUTPUT
          echo "component=general" >> $GITHUB_OUTPUT
        fi
        
    - name: PR 할당
      uses: actions/github-script@v7
      with:
        script: |
          const component = '${{ steps.analyze.outputs.component }}';
          const assigneeMap = {
            'backend': ['${{ github.repository_owner }}'], // 실제 팀원 GitHub 아이디로 변경
            'frontend': ['${{ github.repository_owner }}'], // 실제 팀원 GitHub 아이디로 변경
            'docs': ['${{ github.repository_owner }}'], // 실제 팀원 GitHub 아이디로 변경
            'general': ['${{ github.repository_owner }}'] // 실제 메인테이너 GitHub 아이디로 변경
          };
          
          const assignees = assigneeMap[component] || assigneeMap['general'];
          
          // PR 할당
          try {
            await github.rest.issues.addAssignees({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              assignees: assignees
            });
            
            console.log(`PR이 ${assignees.join(', ')}에게 할당되었습니다.`);
          } catch (error) {
            console.log(`할당 실패: ${error.message}`);
          }
          
          // 댓글로 할당 정보 알림
          const comment = `## 🎯 자동 할당 완료
          
          **컴포넌트**: ${component}
          **할당자**: ${assignees.map(a => `@${a}`).join(', ')}
          
          ---
          *이 PR은 변경된 파일을 기반으로 자동 할당되었습니다.*`;
          
          await github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          }); 